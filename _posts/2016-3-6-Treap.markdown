---
layout: post
title:  "Data Structure: Treap"
date:   2016-03-06 11:30 -0600
categories: SPOJ
---

**Motivation:**
Balanced Binary Search Tree is a very important abstract data structure in Computer Science, since it can perform 
insert, delete and search in logarithmic time complexity and also still keep data in sorted order (a key advantage over hash table).
Given its importance, both C++ and Java have already included it in their standard library
(although the standard does not regulate the specific implementation, Red-Black Tree is usually used).
However, in some competitive programming problems, we need to modify the structure of the tree in order to include 
more data in each node. Unfortunately, since we cannot modify the standard library, we need to implement our own
BBST from scratch. Yet, both AVL Tree and RB Tree have rather high coding complexity given the many cases we need to consider
while doing tree operations. So instead of spending large amount of time coding one of the above BBST, we can also use
treap, which is a randomness based BBST and its implementation difficulty is not as high as the previous two.

**Treap Introduction:**
The name treap is a portmanteau of tree and heap. So conceivably, treap has the properties of both tree and heap.
That is, a treap is a binary search tree, where the key of each node is greater than the one of its left child, while 
less than the one of its right child. The heap property is achieved by giving each node a random value as its arbitrary priority, 
and so the priority of each node is greater than the priorities of both of its children. Overall, the amortized time complexity 
of insert, delete and search are logarithmic, though the worst case are O(n) for all three operations.

**Implementation:**
The main operations are rotations, similar to standard BBST. However, there are not many cases in deletion. 
Every time we try to delete some node, we only need to keep rotating until it becomes the leaf node, so its deletion becomes trivial.
The following code is my implementation of a treap, with use of Object-Oriented Programming, template and smart pointers 
(all of them are not necessary of course, I just used them for fun).

**Note:**
Treap is generally still slower than AVL or Red-Black Trees, but given its easier implementation, we can still use it to solve
most if not all problems where custom BBST is required.

**Source Code:**
{% highlight C++ %}
#include <iostream>
#include <cstdio>
#include <memory>
#include <vector>
#include <cstdlib>
#include <ctime>

using namespace std;

template<typename T>
class treap{
public:
    treap(){
        srand(time(0));
        root = nullptr;
    }

    void insert(const T& elem){
        insert(root, elem);    
    }

    void remove(const T& elem){
        remove(root, elem);
    }
    
private:
    struct node_t{
        T elem;
        shared_ptr<node_t> left, right;
        int priority;
    };

    shared_ptr<node_t> root;

    shared_ptr<node_t> rotateLeft(shared_ptr<node_t> node){
        shared_ptr<node_t> right = node->right, rightLeft = right->left;
        right->left = node;
        node->right = rightLeft;
        return right;
    }

    shared_ptr<node_t> rotateRight(shared_ptr<node_t> node){
        shared_ptr<node_t> left = node->left, leftRight = left->right;
        left->right = node;
        node->left = leftRight;
        return left;
    }

    void insert(shared_ptr<node_t>& node, const T& elem){
        if (node == nullptr){
            node = make_shared<node_t>();
            node->elem = elem;
            node->left = node->right = nullptr;
            node->priority = rand();
            return;
        }
        // We do not allow multiple keys with the same value
        if (node->elem == elem)
            return;

        if (node->elem > elem){
            insert(node->left, elem);
            if (node->priority < node->left->priority)
                node = rotateRight(node);
        }else{
            insert(node->right, elem);
            if (node->priority < node->right->priority)
                node = rotateLeft(node);
        }
    }

    void remove(shared_ptr<node_t>& node, const T& elem){
        if (node == nullptr)
            return;
        
        if (node->elem == elem){
            if (!node->left && !node->right)
                node = nullptr;
            // Keep rotating until the node to be deleted becomes a leaf node.
            else if (!node->left || (node->left && node->right && 
                node->left->priority < node->right->priority)){
                node = rotateLeft(node);
                remove(node->left, elem);
            }
            else{
                node = rotateRight(node);
                remove(node->right, elem);
            }
        }
        else if (node->elem > elem)
            remove(node->left, elem);
        else
            remove(node->right, elem);
    }
};


{% endhighlight %}

