---
layout: post
title:  "UVa 11718 - Fantasy of a Summation"
date:   2016-12-26 19:30:00 -0600
categories: UVa
---

**Problem:** [Fantasy of a Summation]

**Solution:**
There are \\(K\\) loops, each loop has \\(n\\) iterations,
and each summation will sum up \\(K\\) values. So there are 
\\(n^K K\\) values summed in total, and as a result each value in the
array is summed \\(\frac{n^K K}{n}\\) times.

**Source Code:**
{% highlight C++ %}
{% raw %}
#include <bits/stdc++.h>

using namespace std;

long long pow(long long base, long long exp, long long MOD) {
    if (exp == 0)
        return 1;

    if (exp % 2 == 0) {
        long long result = pow(base, exp / 2, MOD) % MOD;
        return result * result % MOD;
    }
    else  {
        long long result = pow(base, exp / 2, MOD) % MOD;
        return base * result * result % MOD;
    }
}

int main() {
    int T;
    scanf("%d", &T);
    for (int cases = 1; cases <= T; cases++) {
        long long n, K, MOD;
        scanf("%lld %lld %lld", &n, &K, &MOD);
        long long sum = 0;
        for (int i = 0; i < n; i++) {
            long long num;
            scanf("%lld", &num);
            sum += num;
            sum %= MOD;
        }

        long long solution = pow(n, K - 1, MOD);
        solution = solution * sum * (K % MOD) % MOD;
        printf("Case %d: %lld\n", cases, solution);
    }
    return 0;
}
{% endraw %}
{% endhighlight %}

[Fantasy of a Summation]:https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&category=24&page=show_problem&problem=2765
